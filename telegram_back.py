# coding: utf-8
import numpy as np
import pandas as pd

from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.utils import executor
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext

import os
current_dir = os.path.abspath(os.getcwd())
parent_dir = os.path.dirname(current_dir)

import sys
sys.path.append(current_dir)

import weth_api as wa
import data_load as dl
import gpt

# getting credles
forecast_settings = dl.read_yaml_config('config.yaml', section='api.weatherapi.com')
base_url = forecast_settings['url']
method = forecast_settings['method']
forecast_api_key = forecast_settings['api_key']

gpt_settings = dl.read_yaml_config('config.yaml', section='gpt')
gpt_api_key = gpt_settings['API_KEY']
gpt_catalog_id = gpt_settings['CATALOG_ID']

telegram_settings = dl.read_yaml_config('config.yaml', section='telgram_test_bot')
telegram_api_token = telegram_settings['token']
admin_chat_id = 249792088

postres_settings = dl.read_yaml_config('config.yaml', section='logging')


def make_event_log(message, event_name, params):
    user = message.from_user.username
    user_id = message.from_user.id

    import datetime
    now = datetime.datetime.now()

    log_lst = [now, user_id, user, event_name, params]
    log_df = pd.DataFrame([log_lst])
    log_df.columns = ['event_time', 'user_id', 'user_name', 'event_name', 'parameters']
    print(log_df)
    # dl.insert_data(log_df, 'tl', 'events')


hello_message = """–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –æ–¥–µ—Ç—å—Å—è –ø–æ –ø–æ–≥–æ–¥–µ! 
–î–ª—è –Ω–∞—á–∞–ª–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–≤–æ–µ–≥–æ –≥–æ—Ä–æ–¥–∞
–ú–æ–∂–Ω–æ –Ω–∞–ø–µ—á–∞—Ç–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –≤—Ä—É—á–Ω—É—é –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é
"""
check_message = """–ú—ã –ø–æ–ª—É—á–∏–ª–∏ –ª–æ–∫–∞—Ü–∏—é. –ë–ª–∏–∂–∞–π—à–∞—è –¥–æ—Å—Ç—É–ø–Ω–∞—è –º–µ—Ç–µ–æ—Å—Ç–∞–Ω—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ª–æ–∫–∞–∫—Ü–∏–∏ {city} """
option_message = """–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ–π—á–∞—Å –¥–ª—è –ª–æ–∫–∞—Ü–∏–∏ {city} –æ–ø—Ü–∏–∏:
"""
finish_message = """'–û–ö' –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–∞—Å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
"""
error_message = """–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –º—ã –Ω–µ –º–æ–∂–µ—Ç –∑–∞–±—Ä–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –≤–∞–º–∏ –≥–æ—Ä–æ–¥—É, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –∫–∞–∫-—Ç–æ –ø–æ-–¥—Ä—É–≥–æ–º—É"""
get_weather_message = """–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ —á–∞—Å—ã –¥–ª—è –ª–æ–∫–∞—Ü–∏–∏ {city} –Ω–∞–π–¥–µ–Ω!
"""
get_gpt_message = """
–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏–∑ –ø—Ä–æ–≥–Ω–æ–∑–∞ —Ñ–æ—Ä–º—É–ª–∏—Ä—É—é—Ç—Å—è, —ç—Ç–æ –¥–æ–ª–∂–Ω–æ –∑–∞–Ω—è—Ç—å –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥
"""

# about buttons
def make_answer_buttons(buttons_lst):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for button in buttons_lst:
        item = types.KeyboardButton(button)
        markup.add(item)
    
    return markup 

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
class Form(StatesGroup):
    waiting_for_city = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞
    waiting_for_option = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –æ–ø—Ü–∏–∏ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
 # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
bot = Bot(token=telegram_api_token)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

@dp.message_handler(commands='start', state='*')
async def cmd_start(message: types.Message, state: FSMContext):
    markup = make_answer_buttons([
        '–ú–æ—Å–∫–≤–∞',
        '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥',
                            ])
    markup.add(types.KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é üìç", request_location=True))
    await state.finish()  
    await state.set_state(Form.waiting_for_city) 
    await message.answer(hello_message, reply_markup=markup)

@dp.message_handler(content_types=['text', 'location'], state=Form.waiting_for_city)
async def process_city(message: types.Message, state: FSMContext):
    # –µ—Å–ª–∏ –≥–µ–æ–ø–æ–∑–∏—Ü–∏—è –Ω–µ–ø—É—Å—Ç–∞—è, —Ç–æ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –µ—ë
    if message.location is not None:
        city = str(message.location.latitude) + ', ' + str(message.location.longitude)
    # –∏–Ω–∞—á–µ - –±–µ—Ä—ë–º —Ç–µ—Å—Ç –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    else:   
        city = message.text  # –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ä–æ–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    await state.update_data(city=city)  # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –≥–æ—Ä–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    make_event_log(message, event_name='city_select', params={'city': city, 'state': 'main'})

    gwd = wa.get_weth_data(forecast_api_key, base_url, method, city, 2)
    if gwd != '':
        await state.update_data(gwd=gwd)
        await show_main_menu(message, state)
    else:
        markup = make_answer_buttons([
        '–ú–æ—Å–∫–≤–∞',
        '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥'
                            ])
        await message.answer(error_message, reply_markup=markup)


@dp.message_handler(state=Form.waiting_for_option)
async def process_option(message: types.Message, state: FSMContext):
    user_data = await state.get_data()  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    city = user_data.get("city")  # –ò–∑–≤–ª–µ–∫–∞–µ–º –≥–æ—Ä–æ–¥
    gwd = user_data.get("gwd")

    markup = make_answer_buttons([
    '–ß—Ç–æ –Ω–∞–¥–µ—Ç—å –ø–æ –ø–æ–≥–æ–¥–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å?',
    '–ö–∞–∫–∞—è —Å–µ–π—á–∞—Å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞?',
    '–î–æ–∂–¥—å –±—É–¥–µ—Ç?',
                        ])
    make_event_log(message, event_name='main_menu_load', params={'state': 'main'})

    if message.text.lower() == '–ß—Ç–æ –Ω–∞–¥–µ—Ç—å –ø–æ –ø–æ–≥–æ–¥–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å?'.lower():
        make_event_log(message, event_name='option_select', params={'option': 1, 'state': 'main'})
        result = await general_process(gwd, message)
    elif message.text.lower() == '–ö–∞–∫–∞—è —Å–µ–π—á–∞—Å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞?'.lower():
        make_event_log(message, event_name='option_select', params={'option': 2, 'state': 'main'})
        result = await direct_process(gwd, message)
    elif message.text.lower() == '–î–æ–∂–¥—å –±—É–¥–µ—Ç?'.lower():
        make_event_log(message, event_name='option_select', params={'option': 3, 'state': 'main'})
        result = await indirect_process(gwd, message)
    else:
        await message.answer(option_message.format(city=gwd['location']['name']), reply_markup=markup)
        return

    markup = make_answer_buttons([
    'Ok',
                        ])
    await message.answer(result)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer(finish_message, reply_markup=markup)
    await state.set_state(Form.waiting_for_option)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –æ–ø—Ü–∏–∏

@dp.message_handler(lambda message: message.text.lower() == "Ok", state=Form.waiting_for_option)
async def back_to_main_menu(message: types.Message, state: FSMContext):
    await show_main_menu(message, state)

async def show_main_menu(message: types.Message, state: FSMContext):
    user_data = await state.get_data()  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    city = user_data.get("city")
    gwd = user_data.get("gwd")
    await message.answer(check_message.format(city=gwd['location']['name']))
    markup = make_answer_buttons([
    '–ß—Ç–æ –Ω–∞–¥–µ—Ç—å –ø–æ –ø–æ–≥–æ–¥–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å?',
    '–ö–∞–∫–∞—è —Å–µ–π—á–∞—Å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞?',
    '–î–æ–∂–¥—å –±—É–¥–µ—Ç?',
                        ])
    await message.answer(option_message.format(city=gwd['location']['name']), reply_markup=markup)
    await state.set_state(Form.waiting_for_option)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –æ–ø—Ü–∏–∏

async def general_process(gwd, message):
    df = wa.load_weth_data_to_df(gwd)
    await message.answer(get_weather_message.format(city=df['place'].values[0]))
    forec_message = wa.get_txt_for_forecast(df)
    await message.answer(get_gpt_message)
    gpt_answer = gpt.send_message(API_KEY=gpt_api_key, CATALOG_ID=gpt_catalog_id, text=forec_message)
    make_event_log(message, event_name='back_response', params={'response': gpt_answer, type: 'gpt', 'state': 'main'})

    return gpt_answer

async def direct_process(gwd, message):
    df = wa.load_weth_data_to_df(gwd)
    forec_message = wa.get_txt_for_forecast(df, metrics=[0,1], is_templ=0)
    make_event_log(message, event_name='back_response', params={'response': forec_message, type: 'forecast', 'state': 'main'})

    return forec_message

async def indirect_process(gwd, message):
    df = wa.load_weth_data_to_df(gwd)
    forec_message = wa.get_txt_for_forecast(df, metrics=[9], is_templ=0)
    make_event_log(message, event_name='back_response', params={'response': forec_message, type: 'forecast', 'state': 'main'})

    return forec_message

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
